2022-12-19 15:45:19 | INFO | fairseq.distributed.utils | distributed init (rank 0): tcp://localhost:12287
2022-12-19 15:45:19 | INFO | fairseq.distributed.utils | distributed init (rank 2): tcp://localhost:12287
2022-12-19 15:45:19 | INFO | root | Added key: store_based_barrier_key:1 to store for rank: 2
2022-12-19 15:45:19 | INFO | fairseq.distributed.utils | distributed init (rank 1): tcp://localhost:12287
2022-12-19 15:45:19 | INFO | root | Added key: store_based_barrier_key:1 to store for rank: 1
2022-12-19 15:45:20 | INFO | root | Added key: store_based_barrier_key:1 to store for rank: 0
2022-12-19 15:45:20 | INFO | fairseq.distributed.utils | initialized host airavat as rank 0
2022-12-19 15:45:20 | INFO | fairseq.distributed.utils | initialized host airavat as rank 2
2022-12-19 15:45:20 | INFO | fairseq.distributed.utils | initialized host airavat as rank 1
2022-12-19 15:45:22 | INFO | fairseq_cli.train | {'_name': None, 'common': {'_name': None, 'no_progress_bar': False, 'log_interval': 100, 'log_format': None, 'log_file': None, 'aim_repo': None, 'aim_run_hash': None, 'tensorboard_logdir': 'bobdata/bob-model_enhi-rand/tensorboard', 'wandb_project': None, 'azureml_logging': False, 'seed': 1, 'cpu': False, 'tpu': False, 'bf16': False, 'memory_efficient_bf16': False, 'fp16': False, 'memory_efficient_fp16': False, 'fp16_no_flatten_grads': False, 'fp16_init_scale': 128, 'fp16_scale_window': None, 'fp16_scale_tolerance': 0.0, 'on_cpu_convert_precision': False, 'min_loss_scale': 0.0001, 'threshold_loss_scale': None, 'amp': False, 'amp_batch_retries': 2, 'amp_init_scale': 128, 'amp_scale_window': None, 'user_dir': None, 'empty_cache_freq': 0, 'all_gather_list_size': 16384, 'model_parallel_size': 1, 'quantization_config_path': None, 'profile': False, 'reset_logging': False, 'suppress_crashes': False, 'use_plasma_view': False, 'plasma_path': '/tmp/plasma'}, 'common_eval': {'_name': None, 'path': None, 'post_process': None, 'quiet': False, 'model_overrides': '{}', 'results_path': None}, 'distributed_training': {'_name': None, 'distributed_world_size': 3, 'distributed_num_procs': 3, 'distributed_rank': 0, 'distributed_backend': 'nccl', 'distributed_init_method': 'tcp://localhost:12287', 'distributed_port': -1, 'device_id': 0, 'distributed_no_spawn': False, 'ddp_backend': 'no_c10d', 'ddp_comm_hook': 'none', 'bucket_cap_mb': 25, 'fix_batches_to_gpus': False, 'find_unused_parameters': False, 'gradient_as_bucket_view': False, 'fast_stat_sync': False, 'heartbeat_timeout': -1, 'broadcast_buffers': False, 'slowmo_momentum': None, 'slowmo_base_algorithm': 'localsgd', 'localsgd_frequency': 3, 'nprocs_per_node': 3, 'pipeline_model_parallel': False, 'pipeline_balance': None, 'pipeline_devices': None, 'pipeline_chunks': 0, 'pipeline_encoder_balance': None, 'pipeline_encoder_devices': None, 'pipeline_decoder_balance': None, 'pipeline_decoder_devices': None, 'pipeline_checkpoint': 'never', 'zero_sharding': 'none', 'fp16': False, 'memory_efficient_fp16': False, 'tpu': False, 'no_reshard_after_forward': False, 'fp32_reduce_scatter': False, 'cpu_offload': False, 'use_sharded_state': False, 'not_fsdp_flatten_parameters': False}, 'dataset': {'_name': None, 'num_workers': 0, 'skip_invalid_size_inputs_valid_test': False, 'max_tokens': 4048, 'batch_size': None, 'required_batch_size_multiple': 8, 'required_seq_len_multiple': 1, 'dataset_impl': None, 'data_buffer_size': 10, 'train_subset': 'train', 'valid_subset': 'valid', 'combine_valid_subsets': None, 'ignore_unused_valid_subsets': False, 'validate_interval': 1, 'validate_interval_updates': 0, 'validate_after_updates': 0, 'fixed_validation_seed': None, 'disable_validation': False, 'max_tokens_valid': 4048, 'batch_size_valid': None, 'max_valid_steps': None, 'curriculum': 0, 'gen_subset': 'test', 'num_shards': 1, 'shard_id': 0, 'grouped_shuffling': False, 'update_epoch_batch_itr': False, 'update_ordered_indices_seed': False}, 'optimization': {'_name': None, 'max_epoch': 0, 'max_update': 300000, 'stop_time_hours': 0.0, 'clip_norm': 1.0, 'sentence_avg': False, 'update_freq': [2], 'lr': [0.0005], 'stop_min_lr': 1e-09, 'use_bmuf': False, 'skip_remainder_batch': False}, 'checkpoint': {'_name': None, 'save_dir': 'checkpoints', 'restore_file': 'checkpoints_latest/checkpoint_best.pt', 'continue_once': None, 'finetune_from_model': None, 'reset_dataloader': False, 'reset_lr_scheduler': False, 'reset_meters': False, 'reset_optimizer': False, 'optimizer_overrides': '{}', 'save_interval': 1, 'save_interval_updates': 0, 'keep_interval_updates': -1, 'keep_interval_updates_pattern': -1, 'keep_last_epochs': 30, 'keep_best_checkpoints': -1, 'no_save': False, 'no_epoch_checkpoints': False, 'no_last_checkpoints': False, 'no_save_optimizer_state': False, 'best_checkpoint_metric': 'bleu', 'maximize_best_checkpoint_metric': True, 'patience': 5, 'checkpoint_suffix': '', 'checkpoint_shard_count': 1, 'load_checkpoint_on_all_dp_ranks': False, 'write_checkpoints_asynchronously': False, 'model_parallel_size': 1}, 'bmuf': {'_name': None, 'block_lr': 1.0, 'block_momentum': 0.875, 'global_sync_iter': 50, 'warmup_iterations': 500, 'use_nbm': False, 'average_sync': False, 'distributed_world_size': 3}, 'generation': {'_name': None, 'beam': 5, 'nbest': 1, 'max_len_a': 0.0, 'max_len_b': 200, 'min_len': 1, 'match_source_len': False, 'unnormalized': False, 'no_early_stop': False, 'no_beamable_mm': False, 'lenpen': 1.0, 'unkpen': 0.0, 'replace_unk': None, 'sacrebleu': False, 'score_reference': False, 'prefix_size': 0, 'no_repeat_ngram_size': 0, 'sampling': False, 'sampling_topk': -1, 'sampling_topp': -1.0, 'constraints': None, 'temperature': 1.0, 'diverse_beam_groups': -1, 'diverse_beam_strength': 0.5, 'diversity_rate': -1.0, 'print_alignment': None, 'print_step': False, 'lm_path': None, 'lm_weight': 0.0, 'iter_decode_eos_penalty': 0.0, 'iter_decode_max_iter': 10, 'iter_decode_force_max_iter': False, 'iter_decode_with_beam': 1, 'iter_decode_with_external_reranker': False, 'retain_iter_history': False, 'retain_dropout': False, 'retain_dropout_modules': None, 'decoding_format': None, 'no_seed_provided': False, 'eos_token': None}, 'eval_lm': {'_name': None, 'output_word_probs': False, 'output_word_stats': False, 'context_window': 0, 'softmax_batch': 9223372036854775807}, 'interactive': {'_name': None, 'buffer_size': 0, 'input': '-'}, 'model': Namespace(_name='transformer_4x', activation_dropout=0.0, activation_fn='relu', adam_betas='(0.9, 0.98)', adam_eps=1e-08, adaptive_input=False, adaptive_softmax_cutoff=None, adaptive_softmax_dropout=0, aim_repo=None, aim_run_hash=None, all_gather_list_size=16384, amp=False, amp_batch_retries=2, amp_init_scale=128, amp_scale_window=None, arch='transformer_4x', attention_dropout=0.0, azureml_logging=False, batch_size=None, batch_size_valid=None, best_checkpoint_metric='bleu', bf16=False, bpe=None, broadcast_buffers=False, bucket_cap_mb=25, checkpoint_activations=False, checkpoint_shard_count=1, checkpoint_suffix='', clip_norm=1.0, combine_valid_subsets=None, consnmt=True, continue_once=None, cpu=False, cpu_offload=False, criterion='label_smoothed_cross_entropy', cross_self_attention=False, curriculum=0, data='bobdata/final_bin', data_buffer_size=10, dataset_impl=None, ddp_backend='no_c10d', ddp_comm_hook='none', decoder_attention_heads=16, decoder_embed_dim=1536, decoder_embed_path=None, decoder_ffn_embed_dim=4096, decoder_input_dim=1536, decoder_layerdrop=0, decoder_layers=6, decoder_layers_to_keep=None, decoder_learned_pos=False, decoder_normalize_before=False, decoder_output_dim=1536, device_id=0, disable_validation=False, distributed_backend='nccl', distributed_init_method=None, distributed_no_spawn=False, distributed_num_procs=3, distributed_port=-1, distributed_rank=0, distributed_world_size=3, dropout=0.2, ema_decay=0.9999, ema_fp32=False, ema_seed_model=None, ema_start_update=0, ema_update_freq=1, empty_cache_freq=0, encoder_attention_heads=16, encoder_embed_dim=1536, encoder_embed_path=None, encoder_ffn_embed_dim=4096, encoder_layerdrop=0, encoder_layers=6, encoder_layers_to_keep=None, encoder_learned_pos=False, encoder_normalize_before=False, eos=2, eval_bleu=True, eval_bleu_args='{"beam": 5, "max_len_a": 1.2, "max_len_b": 10}', eval_bleu_detok='moses', eval_bleu_detok_args='{}', eval_bleu_print_samples=True, eval_bleu_remove_bpe='@@ ', eval_tokenized_bleu=False, exp_name='leca_ptrnet-en-hi', fast_stat_sync=False, find_unused_parameters=False, finetune_from_model=None, fix_batches_to_gpus=False, fixed_validation_seed=None, fp16=False, fp16_adam_stats=False, fp16_init_scale=128, fp16_no_flatten_grads=False, fp16_scale_tolerance=0.0, fp16_scale_window=None, fp32_reduce_scatter=False, gen_subset='test', gradient_as_bucket_view=False, grouped_shuffling=False, heartbeat_timeout=-1, ignore_prefix_size=0, ignore_unused_valid_subsets=False, keep_best_checkpoints=-1, keep_interval_updates=-1, keep_interval_updates_pattern=-1, keep_last_epochs=30, label_smoothing=0.1, layernorm_embedding=False, left_pad_source=True, left_pad_target=False, load_alignments=False, load_checkpoint_on_all_dp_ranks=False, localsgd_frequency=3, log_file=None, log_format=None, log_interval=100, lr=[0.0005], lr_scheduler='inverse_sqrt', max_epoch=0, max_tokens=4048, max_tokens_valid=4048, max_update=300000, max_valid_steps=None, maximize_best_checkpoint_metric=True, memory_efficient_bf16=False, memory_efficient_fp16=False, merge_src_tgt_embed=False, min_loss_scale=0.0001, model_parallel_size=1, no_cross_attention=False, no_epoch_checkpoints=False, no_last_checkpoints=False, no_progress_bar=False, no_reshard_after_forward=False, no_save=False, no_save_optimizer_state=False, no_scale_embedding=False, no_seed_provided=False, no_token_positional_embeddings=False, not_fsdp_flatten_parameters=False, nprocs_per_node=3, num_batch_buckets=0, num_shards=1, num_workers=0, offload_activations=False, on_cpu_convert_precision=False, optimizer='adam', optimizer_overrides='{}', pad=1, patience=5, pipeline_balance=None, pipeline_checkpoint='never', pipeline_chunks=0, pipeline_decoder_balance=None, pipeline_decoder_devices=None, pipeline_devices=None, pipeline_encoder_balance=None, pipeline_encoder_devices=None, pipeline_model_parallel=False, plasma_path='/tmp/plasma', profile=False, quant_noise_pq=0, quant_noise_pq_block_size=8, quant_noise_scalar=0, quantization_config_path=None, report_accuracy=False, required_batch_size_multiple=8, required_seq_len_multiple=1, reset_dataloader=False, reset_logging=False, reset_lr_scheduler=False, reset_meters=False, reset_optimizer=False, restore_file='checkpoints_latest/checkpoint_best.pt', save_dir='checkpoints', save_interval=1, save_interval_updates=0, scoring='bleu', seed=1, sentence_avg=False, shard_id=0, share_all_embeddings=False, share_decoder_input_output_embed=False, skip_invalid_size_inputs_valid_test=False, skip_remainder_batch=False, slowmo_base_algorithm='localsgd', slowmo_momentum=None, source_lang='en', stop_min_lr=1e-09, stop_time_hours=0, store_ema=False, suppress_crashes=False, target_lang='hi', task='translation', tensorboard_logdir='bobdata/bob-model_enhi-rand/tensorboard', threshold_loss_scale=None, tie_adaptive_weights=False, tokenizer=None, tpu=False, train_subset='train', truncate_source=False, unk=3, update_epoch_batch_itr=False, update_freq=[2], update_ordered_indices_seed=False, upsample_primary=-1, use_bmuf=False, use_old_adam=False, use_plasma_view=False, use_ptrnet=True, use_sharded_state=False, user_dir=None, valid_subset='valid', validate_after_updates=0, validate_interval=1, validate_interval_updates=0, wandb_project=None, warmup_init_lr=1e-07, warmup_updates=4000, weight_decay=0.0001, write_checkpoints_asynchronously=False, zero_sharding='none'), 'task': {'_name': 'translation', 'data': 'bobdata/final_bin', 'source_lang': 'en', 'target_lang': 'hi', 'load_alignments': False, 'left_pad_source': True, 'left_pad_target': False, 'max_source_positions': 1024, 'max_target_positions': 1024, 'upsample_primary': -1, 'truncate_source': False, 'num_batch_buckets': 0, 'train_subset': 'train', 'dataset_impl': None, 'required_seq_len_multiple': 1, 'eval_bleu': True, 'eval_bleu_args': '{"beam": 5, "max_len_a": 1.2, "max_len_b": 10}', 'eval_bleu_detok': 'moses', 'eval_bleu_detok_args': '{}', 'eval_tokenized_bleu': False, 'eval_bleu_remove_bpe': '@@ ', 'eval_bleu_print_samples': True, 'consnmt': True}, 'criterion': {'_name': 'label_smoothed_cross_entropy', 'label_smoothing': 0.1, 'report_accuracy': False, 'ignore_prefix_size': 0, 'sentence_avg': False}, 'optimizer': {'_name': 'adam', 'adam_betas': '(0.9, 0.98)', 'adam_eps': 1e-08, 'weight_decay': 0.0001, 'use_old_adam': False, 'fp16_adam_stats': False, 'tpu': False, 'lr': [0.0005]}, 'lr_scheduler': {'_name': 'inverse_sqrt', 'warmup_updates': 4000, 'warmup_init_lr': 1e-07, 'lr': [0.0005]}, 'scoring': {'_name': 'bleu', 'pad': 1, 'eos': 2, 'unk': 3}, 'bpe': None, 'tokenizer': None, 'ema': {'_name': None, 'store_ema': False, 'ema_decay': 0.9999, 'ema_start_update': 0, 'ema_seed_model': None, 'ema_update_freq': 1, 'ema_fp32': False}}
2022-12-19 15:45:22 | INFO | fairseq.tasks.translation | [en] dictionary: 19184 types
2022-12-19 15:45:22 | INFO | fairseq.tasks.translation | [hi] dictionary: 33048 types
2022-12-19 15:45:27 | INFO | fairseq_cli.train | TransformerModel(
  (encoder): TransformerEncoderBase(
    (dropout_module): FairseqDropout()
    (embed_tokens): Embedding(19184, 1536, padding_idx=1)
    (cons_pos_embed): ConsPosiEmb()
    (seg_embed): Embedding(1024, 1536, padding_idx=1)
    (embed_positions): SinusoidalPositionalEmbedding()
    (layers): ModuleList(
      (0): TransformerEncoderLayerBase(
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1536, out_features=1536, bias=True)
          (v_proj): Linear(in_features=1536, out_features=1536, bias=True)
          (q_proj): Linear(in_features=1536, out_features=1536, bias=True)
          (out_proj): Linear(in_features=1536, out_features=1536, bias=True)
        )
        (self_attn_layer_norm): LayerNorm((1536,), eps=1e-05, elementwise_affine=True)
        (dropout_module): FairseqDropout()
        (activation_dropout_module): FairseqDropout()
        (fc1): Linear(in_features=1536, out_features=4096, bias=True)
        (fc2): Linear(in_features=4096, out_features=1536, bias=True)
        (final_layer_norm): LayerNorm((1536,), eps=1e-05, elementwise_affine=True)
      )
      (1): TransformerEncoderLayerBase(
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1536, out_features=1536, bias=True)
          (v_proj): Linear(in_features=1536, out_features=1536, bias=True)
          (q_proj): Linear(in_features=1536, out_features=1536, bias=True)
          (out_proj): Linear(in_features=1536, out_features=1536, bias=True)
        )
        (self_attn_layer_norm): LayerNorm((1536,), eps=1e-05, elementwise_affine=True)
        (dropout_module): FairseqDropout()
        (activation_dropout_module): FairseqDropout()
        (fc1): Linear(in_features=1536, out_features=4096, bias=True)
        (fc2): Linear(in_features=4096, out_features=1536, bias=True)
        (final_layer_norm): LayerNorm((1536,), eps=1e-05, elementwise_affine=True)
      )
      (2): TransformerEncoderLayerBase(
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1536, out_features=1536, bias=True)
          (v_proj): Linear(in_features=1536, out_features=1536, bias=True)
          (q_proj): Linear(in_features=1536, out_features=1536, bias=True)
          (out_proj): Linear(in_features=1536, out_features=1536, bias=True)
        )
        (self_attn_layer_norm): LayerNorm((1536,), eps=1e-05, elementwise_affine=True)
        (dropout_module): FairseqDropout()
        (activation_dropout_module): FairseqDropout()
        (fc1): Linear(in_features=1536, out_features=4096, bias=True)
        (fc2): Linear(in_features=4096, out_features=1536, bias=True)
        (final_layer_norm): LayerNorm((1536,), eps=1e-05, elementwise_affine=True)
      )
      (3): TransformerEncoderLayerBase(
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1536, out_features=1536, bias=True)
          (v_proj): Linear(in_features=1536, out_features=1536, bias=True)
          (q_proj): Linear(in_features=1536, out_features=1536, bias=True)
          (out_proj): Linear(in_features=1536, out_features=1536, bias=True)
        )
        (self_attn_layer_norm): LayerNorm((1536,), eps=1e-05, elementwise_affine=True)
        (dropout_module): FairseqDropout()
        (activation_dropout_module): FairseqDropout()
        (fc1): Linear(in_features=1536, out_features=4096, bias=True)
        (fc2): Linear(in_features=4096, out_features=1536, bias=True)
        (final_layer_norm): LayerNorm((1536,), eps=1e-05, elementwise_affine=True)
      )
      (4): TransformerEncoderLayerBase(
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1536, out_features=1536, bias=True)
          (v_proj): Linear(in_features=1536, out_features=1536, bias=True)
          (q_proj): Linear(in_features=1536, out_features=1536, bias=True)
          (out_proj): Linear(in_features=1536, out_features=1536, bias=True)
        )
        (self_attn_layer_norm): LayerNorm((1536,), eps=1e-05, elementwise_affine=True)
        (dropout_module): FairseqDropout()
        (activation_dropout_module): FairseqDropout()
        (fc1): Linear(in_features=1536, out_features=4096, bias=True)
        (fc2): Linear(in_features=4096, out_features=1536, bias=True)
        (final_layer_norm): LayerNorm((1536,), eps=1e-05, elementwise_affine=True)
      )
      (5): TransformerEncoderLayerBase(
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1536, out_features=1536, bias=True)
          (v_proj): Linear(in_features=1536, out_features=1536, bias=True)
          (q_proj): Linear(in_features=1536, out_features=1536, bias=True)
          (out_proj): Linear(in_features=1536, out_features=1536, bias=True)
        )
        (self_attn_layer_norm): LayerNorm((1536,), eps=1e-05, elementwise_affine=True)
        (dropout_module): FairseqDropout()
        (activation_dropout_module): FairseqDropout()
        (fc1): Linear(in_features=1536, out_features=4096, bias=True)
        (fc2): Linear(in_features=4096, out_features=1536, bias=True)
        (final_layer_norm): LayerNorm((1536,), eps=1e-05, elementwise_affine=True)
      )
    )
  )
  (decoder): TransformerDecoderBase(
    (dropout_module): FairseqDropout()
    (embed_tokens): Embedding(33048, 1536, padding_idx=1)
    (embed_positions): SinusoidalPositionalEmbedding()
    (layers): ModuleList(
      (0): TransformerDecoderLayerBase(
        (dropout_module): FairseqDropout()
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1536, out_features=1536, bias=True)
          (v_proj): Linear(in_features=1536, out_features=1536, bias=True)
          (q_proj): Linear(in_features=1536, out_features=1536, bias=True)
          (out_proj): Linear(in_features=1536, out_features=1536, bias=True)
        )
        (activation_dropout_module): FairseqDropout()
        (self_attn_layer_norm): LayerNorm((1536,), eps=1e-05, elementwise_affine=True)
        (encoder_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1536, out_features=1536, bias=True)
          (v_proj): Linear(in_features=1536, out_features=1536, bias=True)
          (q_proj): Linear(in_features=1536, out_features=1536, bias=True)
          (out_proj): Linear(in_features=1536, out_features=1536, bias=True)
        )
        (encoder_attn_layer_norm): LayerNorm((1536,), eps=1e-05, elementwise_affine=True)
        (fc1): Linear(in_features=1536, out_features=4096, bias=True)
        (fc2): Linear(in_features=4096, out_features=1536, bias=True)
        (final_layer_norm): LayerNorm((1536,), eps=1e-05, elementwise_affine=True)
      )
      (1): TransformerDecoderLayerBase(
        (dropout_module): FairseqDropout()
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1536, out_features=1536, bias=True)
          (v_proj): Linear(in_features=1536, out_features=1536, bias=True)
          (q_proj): Linear(in_features=1536, out_features=1536, bias=True)
          (out_proj): Linear(in_features=1536, out_features=1536, bias=True)
        )
        (activation_dropout_module): FairseqDropout()
        (self_attn_layer_norm): LayerNorm((1536,), eps=1e-05, elementwise_affine=True)
        (encoder_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1536, out_features=1536, bias=True)
          (v_proj): Linear(in_features=1536, out_features=1536, bias=True)
          (q_proj): Linear(in_features=1536, out_features=1536, bias=True)
          (out_proj): Linear(in_features=1536, out_features=1536, bias=True)
        )
        (encoder_attn_layer_norm): LayerNorm((1536,), eps=1e-05, elementwise_affine=True)
        (fc1): Linear(in_features=1536, out_features=4096, bias=True)
        (fc2): Linear(in_features=4096, out_features=1536, bias=True)
        (final_layer_norm): LayerNorm((1536,), eps=1e-05, elementwise_affine=True)
      )
      (2): TransformerDecoderLayerBase(
        (dropout_module): FairseqDropout()
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1536, out_features=1536, bias=True)
          (v_proj): Linear(in_features=1536, out_features=1536, bias=True)
          (q_proj): Linear(in_features=1536, out_features=1536, bias=True)
          (out_proj): Linear(in_features=1536, out_features=1536, bias=True)
        )
        (activation_dropout_module): FairseqDropout()
        (self_attn_layer_norm): LayerNorm((1536,), eps=1e-05, elementwise_affine=True)
        (encoder_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1536, out_features=1536, bias=True)
          (v_proj): Linear(in_features=1536, out_features=1536, bias=True)
          (q_proj): Linear(in_features=1536, out_features=1536, bias=True)
          (out_proj): Linear(in_features=1536, out_features=1536, bias=True)
        )
        (encoder_attn_layer_norm): LayerNorm((1536,), eps=1e-05, elementwise_affine=True)
        (fc1): Linear(in_features=1536, out_features=4096, bias=True)
        (fc2): Linear(in_features=4096, out_features=1536, bias=True)
        (final_layer_norm): LayerNorm((1536,), eps=1e-05, elementwise_affine=True)
      )
      (3): TransformerDecoderLayerBase(
        (dropout_module): FairseqDropout()
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1536, out_features=1536, bias=True)
          (v_proj): Linear(in_features=1536, out_features=1536, bias=True)
          (q_proj): Linear(in_features=1536, out_features=1536, bias=True)
          (out_proj): Linear(in_features=1536, out_features=1536, bias=True)
        )
        (activation_dropout_module): FairseqDropout()
        (self_attn_layer_norm): LayerNorm((1536,), eps=1e-05, elementwise_affine=True)
        (encoder_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1536, out_features=1536, bias=True)
          (v_proj): Linear(in_features=1536, out_features=1536, bias=True)
          (q_proj): Linear(in_features=1536, out_features=1536, bias=True)
          (out_proj): Linear(in_features=1536, out_features=1536, bias=True)
        )
        (encoder_attn_layer_norm): LayerNorm((1536,), eps=1e-05, elementwise_affine=True)
        (fc1): Linear(in_features=1536, out_features=4096, bias=True)
        (fc2): Linear(in_features=4096, out_features=1536, bias=True)
        (final_layer_norm): LayerNorm((1536,), eps=1e-05, elementwise_affine=True)
      )
      (4): TransformerDecoderLayerBase(
        (dropout_module): FairseqDropout()
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1536, out_features=1536, bias=True)
          (v_proj): Linear(in_features=1536, out_features=1536, bias=True)
          (q_proj): Linear(in_features=1536, out_features=1536, bias=True)
          (out_proj): Linear(in_features=1536, out_features=1536, bias=True)
        )
        (activation_dropout_module): FairseqDropout()
        (self_attn_layer_norm): LayerNorm((1536,), eps=1e-05, elementwise_affine=True)
        (encoder_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1536, out_features=1536, bias=True)
          (v_proj): Linear(in_features=1536, out_features=1536, bias=True)
          (q_proj): Linear(in_features=1536, out_features=1536, bias=True)
          (out_proj): Linear(in_features=1536, out_features=1536, bias=True)
        )
        (encoder_attn_layer_norm): LayerNorm((1536,), eps=1e-05, elementwise_affine=True)
        (fc1): Linear(in_features=1536, out_features=4096, bias=True)
        (fc2): Linear(in_features=4096, out_features=1536, bias=True)
        (final_layer_norm): LayerNorm((1536,), eps=1e-05, elementwise_affine=True)
      )
      (5): TransformerDecoderLayerBase(
        (dropout_module): FairseqDropout()
        (self_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1536, out_features=1536, bias=True)
          (v_proj): Linear(in_features=1536, out_features=1536, bias=True)
          (q_proj): Linear(in_features=1536, out_features=1536, bias=True)
          (out_proj): Linear(in_features=1536, out_features=1536, bias=True)
        )
        (activation_dropout_module): FairseqDropout()
        (self_attn_layer_norm): LayerNorm((1536,), eps=1e-05, elementwise_affine=True)
        (encoder_attn): MultiheadAttention(
          (dropout_module): FairseqDropout()
          (k_proj): Linear(in_features=1536, out_features=1536, bias=True)
          (v_proj): Linear(in_features=1536, out_features=1536, bias=True)
          (q_proj): Linear(in_features=1536, out_features=1536, bias=True)
          (out_proj): Linear(in_features=1536, out_features=1536, bias=True)
        )
        (encoder_attn_layer_norm): LayerNorm((1536,), eps=1e-05, elementwise_affine=True)
        (fc1): Linear(in_features=1536, out_features=4096, bias=True)
        (fc2): Linear(in_features=4096, out_features=1536, bias=True)
        (final_layer_norm): LayerNorm((1536,), eps=1e-05, elementwise_affine=True)
      )
    )
    (output_projection): Linear(in_features=1536, out_features=33048, bias=False)
    (ptrnet): PointerNet(
      (linear): Linear(in_features=3072, out_features=1, bias=True)
    )
  )
)
2022-12-19 15:45:27 | INFO | fairseq_cli.train | task: TranslationTask
2022-12-19 15:45:27 | INFO | fairseq_cli.train | model: TransformerModel
2022-12-19 15:45:27 | INFO | fairseq_cli.train | criterion: LabelSmoothedCrossEntropyCriterion
2022-12-19 15:45:27 | INFO | fairseq_cli.train | num. shared model params: 453,700,609 (num. trained: 453,700,609)
2022-12-19 15:45:27 | INFO | fairseq_cli.train | num. expert model params: 0 (num. trained: 0)
QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQq True
self.cfg.consnmt True
KKKKKKKKKKKKKKKKKKKKKK 0
datpath bobdata/final_bin
split valid
consfile name  bobdata/final_bin/valid.en-hi.constraints
file name is  bobdata/final_bin/valid.en-hi.en
filename True
consfilename True
prefix + src bobdata/final_bin/valid.en-hi.en
prefix + target bobdata/final_bin/valid.en-hi.hi
prefix + constraint bobdata/final_bin/valid.en-hi.constraints
self.cfg.consnmt 2nd time  True
2022-12-19 15:45:27 | INFO | fairseq.data.data_utils | loaded 800 examples from: bobdata/final_bin/valid.en-hi.en
2022-12-19 15:45:27 | INFO | fairseq.data.data_utils | loaded 800 examples from: bobdata/final_bin/valid.en-hi.hi
2022-12-19 15:45:27 | INFO | fairseq.data.data_utils | loaded 800 examples from: bobdata/final_bin/valid.en-hi.constraints
2022-12-19 15:45:27 | INFO | fairseq.tasks.translation | bobdata/final_bin valid en-hi 800 examples
source dataset <fairseq.data.indexed_dataset.MMapIndexedDataset object at 0x7f527963ec50>
target dataset <fairseq.data.indexed_dataset.MMapIndexedDataset object at 0x7f527963eba8>
cons dataset <fairseq.data.indexed_dataset.IndexedRawTextDataset object at 0x7f527963ecc0>
DEVICE: ##################### :: cuda
2022-12-19 15:45:27 | INFO | root | Added key: store_based_barrier_key:2 to store for rank: 0
2022-12-19 15:45:27 | INFO | fairseq.utils | ***********************CUDA enviroments for all 3 workers***********************
2022-12-19 15:45:27 | INFO | fairseq.utils | rank   0: capabilities =  8.6  ; total memory = 47.542 GB ; name = RTX A6000                               
2022-12-19 15:45:27 | INFO | fairseq.utils | rank   1: capabilities =  8.6  ; total memory = 44.565 GB ; name = RTX A6000                               
2022-12-19 15:45:27 | INFO | fairseq.utils | rank   2: capabilities =  8.6  ; total memory = 47.544 GB ; name = RTX A6000                               
2022-12-19 15:45:27 | INFO | fairseq.utils | ***********************CUDA enviroments for all 3 workers***********************
2022-12-19 15:45:27 | INFO | fairseq_cli.train | training on 3 devices (GPUs/TPUs)
2022-12-19 15:45:27 | INFO | fairseq_cli.train | max tokens per device = 4048 and max sentences per device = None
#############################################################################################
2022-12-19 15:45:27 | INFO | fairseq.trainer | Preparing to load checkpoint checkpoints_latest/checkpoint_best.pt
QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQq True
self.cfg.consnmt True
KKKKKKKKKKKKKKKKKKKKKK 0
datpath bobdata/final_bin
split valid
consfile name  bobdata/final_bin/valid.en-hi.constraints
file name is  bobdata/final_bin/valid.en-hi.en
filename True
consfilename True
prefix + src bobdata/final_bin/valid.en-hi.en
prefix + target bobdata/final_bin/valid.en-hi.hi
prefix + constraint bobdata/final_bin/valid.en-hi.constraints
self.cfg.consnmt 2nd time  True
source dataset <fairseq.data.indexed_dataset.MMapIndexedDataset object at 0x7f874eca4cc0>
target dataset <fairseq.data.indexed_dataset.MMapIndexedDataset object at 0x7f874eca4c18>
cons dataset <fairseq.data.indexed_dataset.IndexedRawTextDataset object at 0x7f874eca4ba8>
DEVICE: ##################### :: cuda
#############################################################################################
QQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQq True
self.cfg.consnmt True
KKKKKKKKKKKKKKKKKKKKKK 0
datpath bobdata/final_bin
split valid
consfile name  bobdata/final_bin/valid.en-hi.constraints
file name is  bobdata/final_bin/valid.en-hi.en
filename True
consfilename True
prefix + src bobdata/final_bin/valid.en-hi.en
prefix + target bobdata/final_bin/valid.en-hi.hi
prefix + constraint bobdata/final_bin/valid.en-hi.constraints
self.cfg.consnmt 2nd time  True
source dataset <fairseq.data.indexed_dataset.MMapIndexedDataset object at 0x7f226e367cc0>
target dataset <fairseq.data.indexed_dataset.MMapIndexedDataset object at 0x7f226e367c18>
cons dataset <fairseq.data.indexed_dataset.IndexedRawTextDataset object at 0x7f226e367ba8>
DEVICE: ##################### :: cuda
#############################################################################################
Traceback (most recent call last):
  File "fairseq_cli/train.py", line 576, in <module>
    cli_main()
  File "fairseq_cli/train.py", line 569, in cli_main
    distributed_utils.call_main(cfg, main)
  File "/home/souvik/improved_leca/trial_v12/dictdis_multigpu/fairseq/fairseq/distributed/utils.py", line 351, in call_main
    join=True,
  File "/home/souvik/.conda/envs/trialv12/lib/python3.6/site-packages/torch/multiprocessing/spawn.py", line 230, in spawn
    return start_processes(fn, args, nprocs, join, daemon, start_method='spawn')
  File "/home/souvik/.conda/envs/trialv12/lib/python3.6/site-packages/torch/multiprocessing/spawn.py", line 188, in start_processes
    while not context.join():
  File "/home/souvik/.conda/envs/trialv12/lib/python3.6/site-packages/torch/multiprocessing/spawn.py", line 150, in join
    raise ProcessRaisedException(msg, error_index, failed_process.pid)
torch.multiprocessing.spawn.ProcessRaisedException: 

-- Process 0 terminated with the following error:
Traceback (most recent call last):
  File "/home/souvik/improved_leca/trial_v12/dictdis_multigpu/fairseq/fairseq/trainer.py", line 570, in load_checkpoint
    state["model"], strict=True, model_cfg=self.cfg.model
  File "/home/souvik/improved_leca/trial_v12/dictdis_multigpu/fairseq/fairseq/distributed/module_proxy_wrapper.py", line 53, in load_state_dict
    return self.module.module.load_state_dict(*args, **kwargs)
  File "/home/souvik/improved_leca/trial_v12/dictdis_multigpu/fairseq/fairseq/models/fairseq_model.py", line 128, in load_state_dict
    return super().load_state_dict(new_state_dict, strict)
  File "/home/souvik/.conda/envs/trialv12/lib/python3.6/site-packages/torch/nn/modules/module.py", line 1224, in load_state_dict
    self.__class__.__name__, "\n\t".join(error_msgs)))
RuntimeError: Error(s) in loading state_dict for TransformerModel:
	size mismatch for encoder.embed_tokens.weight: copying a param with shape torch.Size([19184, 512]) from checkpoint, the shape in current model is torch.Size([19184, 1536]).
	size mismatch for encoder.seg_embed.weight: copying a param with shape torch.Size([1024, 512]) from checkpoint, the shape in current model is torch.Size([1024, 1536]).
	size mismatch for encoder.layers.0.self_attn.k_proj.weight: copying a param with shape torch.Size([512, 512]) from checkpoint, the shape in current model is torch.Size([1536, 1536]).
	size mismatch for encoder.layers.0.self_attn.k_proj.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for encoder.layers.0.self_attn.v_proj.weight: copying a param with shape torch.Size([512, 512]) from checkpoint, the shape in current model is torch.Size([1536, 1536]).
	size mismatch for encoder.layers.0.self_attn.v_proj.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for encoder.layers.0.self_attn.q_proj.weight: copying a param with shape torch.Size([512, 512]) from checkpoint, the shape in current model is torch.Size([1536, 1536]).
	size mismatch for encoder.layers.0.self_attn.q_proj.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for encoder.layers.0.self_attn.out_proj.weight: copying a param with shape torch.Size([512, 512]) from checkpoint, the shape in current model is torch.Size([1536, 1536]).
	size mismatch for encoder.layers.0.self_attn.out_proj.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for encoder.layers.0.self_attn_layer_norm.weight: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for encoder.layers.0.self_attn_layer_norm.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for encoder.layers.0.fc1.weight: copying a param with shape torch.Size([2048, 512]) from checkpoint, the shape in current model is torch.Size([4096, 1536]).
	size mismatch for encoder.layers.0.fc1.bias: copying a param with shape torch.Size([2048]) from checkpoint, the shape in current model is torch.Size([4096]).
	size mismatch for encoder.layers.0.fc2.weight: copying a param with shape torch.Size([512, 2048]) from checkpoint, the shape in current model is torch.Size([1536, 4096]).
	size mismatch for encoder.layers.0.fc2.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for encoder.layers.0.final_layer_norm.weight: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for encoder.layers.0.final_layer_norm.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for encoder.layers.1.self_attn.k_proj.weight: copying a param with shape torch.Size([512, 512]) from checkpoint, the shape in current model is torch.Size([1536, 1536]).
	size mismatch for encoder.layers.1.self_attn.k_proj.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for encoder.layers.1.self_attn.v_proj.weight: copying a param with shape torch.Size([512, 512]) from checkpoint, the shape in current model is torch.Size([1536, 1536]).
	size mismatch for encoder.layers.1.self_attn.v_proj.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for encoder.layers.1.self_attn.q_proj.weight: copying a param with shape torch.Size([512, 512]) from checkpoint, the shape in current model is torch.Size([1536, 1536]).
	size mismatch for encoder.layers.1.self_attn.q_proj.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for encoder.layers.1.self_attn.out_proj.weight: copying a param with shape torch.Size([512, 512]) from checkpoint, the shape in current model is torch.Size([1536, 1536]).
	size mismatch for encoder.layers.1.self_attn.out_proj.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for encoder.layers.1.self_attn_layer_norm.weight: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for encoder.layers.1.self_attn_layer_norm.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for encoder.layers.1.fc1.weight: copying a param with shape torch.Size([2048, 512]) from checkpoint, the shape in current model is torch.Size([4096, 1536]).
	size mismatch for encoder.layers.1.fc1.bias: copying a param with shape torch.Size([2048]) from checkpoint, the shape in current model is torch.Size([4096]).
	size mismatch for encoder.layers.1.fc2.weight: copying a param with shape torch.Size([512, 2048]) from checkpoint, the shape in current model is torch.Size([1536, 4096]).
	size mismatch for encoder.layers.1.fc2.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for encoder.layers.1.final_layer_norm.weight: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for encoder.layers.1.final_layer_norm.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for encoder.layers.2.self_attn.k_proj.weight: copying a param with shape torch.Size([512, 512]) from checkpoint, the shape in current model is torch.Size([1536, 1536]).
	size mismatch for encoder.layers.2.self_attn.k_proj.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for encoder.layers.2.self_attn.v_proj.weight: copying a param with shape torch.Size([512, 512]) from checkpoint, the shape in current model is torch.Size([1536, 1536]).
	size mismatch for encoder.layers.2.self_attn.v_proj.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for encoder.layers.2.self_attn.q_proj.weight: copying a param with shape torch.Size([512, 512]) from checkpoint, the shape in current model is torch.Size([1536, 1536]).
	size mismatch for encoder.layers.2.self_attn.q_proj.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for encoder.layers.2.self_attn.out_proj.weight: copying a param with shape torch.Size([512, 512]) from checkpoint, the shape in current model is torch.Size([1536, 1536]).
	size mismatch for encoder.layers.2.self_attn.out_proj.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for encoder.layers.2.self_attn_layer_norm.weight: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for encoder.layers.2.self_attn_layer_norm.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for encoder.layers.2.fc1.weight: copying a param with shape torch.Size([2048, 512]) from checkpoint, the shape in current model is torch.Size([4096, 1536]).
	size mismatch for encoder.layers.2.fc1.bias: copying a param with shape torch.Size([2048]) from checkpoint, the shape in current model is torch.Size([4096]).
	size mismatch for encoder.layers.2.fc2.weight: copying a param with shape torch.Size([512, 2048]) from checkpoint, the shape in current model is torch.Size([1536, 4096]).
	size mismatch for encoder.layers.2.fc2.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for encoder.layers.2.final_layer_norm.weight: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for encoder.layers.2.final_layer_norm.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for encoder.layers.3.self_attn.k_proj.weight: copying a param with shape torch.Size([512, 512]) from checkpoint, the shape in current model is torch.Size([1536, 1536]).
	size mismatch for encoder.layers.3.self_attn.k_proj.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for encoder.layers.3.self_attn.v_proj.weight: copying a param with shape torch.Size([512, 512]) from checkpoint, the shape in current model is torch.Size([1536, 1536]).
	size mismatch for encoder.layers.3.self_attn.v_proj.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for encoder.layers.3.self_attn.q_proj.weight: copying a param with shape torch.Size([512, 512]) from checkpoint, the shape in current model is torch.Size([1536, 1536]).
	size mismatch for encoder.layers.3.self_attn.q_proj.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for encoder.layers.3.self_attn.out_proj.weight: copying a param with shape torch.Size([512, 512]) from checkpoint, the shape in current model is torch.Size([1536, 1536]).
	size mismatch for encoder.layers.3.self_attn.out_proj.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for encoder.layers.3.self_attn_layer_norm.weight: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for encoder.layers.3.self_attn_layer_norm.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for encoder.layers.3.fc1.weight: copying a param with shape torch.Size([2048, 512]) from checkpoint, the shape in current model is torch.Size([4096, 1536]).
	size mismatch for encoder.layers.3.fc1.bias: copying a param with shape torch.Size([2048]) from checkpoint, the shape in current model is torch.Size([4096]).
	size mismatch for encoder.layers.3.fc2.weight: copying a param with shape torch.Size([512, 2048]) from checkpoint, the shape in current model is torch.Size([1536, 4096]).
	size mismatch for encoder.layers.3.fc2.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for encoder.layers.3.final_layer_norm.weight: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for encoder.layers.3.final_layer_norm.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for encoder.layers.4.self_attn.k_proj.weight: copying a param with shape torch.Size([512, 512]) from checkpoint, the shape in current model is torch.Size([1536, 1536]).
	size mismatch for encoder.layers.4.self_attn.k_proj.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for encoder.layers.4.self_attn.v_proj.weight: copying a param with shape torch.Size([512, 512]) from checkpoint, the shape in current model is torch.Size([1536, 1536]).
	size mismatch for encoder.layers.4.self_attn.v_proj.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for encoder.layers.4.self_attn.q_proj.weight: copying a param with shape torch.Size([512, 512]) from checkpoint, the shape in current model is torch.Size([1536, 1536]).
	size mismatch for encoder.layers.4.self_attn.q_proj.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for encoder.layers.4.self_attn.out_proj.weight: copying a param with shape torch.Size([512, 512]) from checkpoint, the shape in current model is torch.Size([1536, 1536]).
	size mismatch for encoder.layers.4.self_attn.out_proj.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for encoder.layers.4.self_attn_layer_norm.weight: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for encoder.layers.4.self_attn_layer_norm.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for encoder.layers.4.fc1.weight: copying a param with shape torch.Size([2048, 512]) from checkpoint, the shape in current model is torch.Size([4096, 1536]).
	size mismatch for encoder.layers.4.fc1.bias: copying a param with shape torch.Size([2048]) from checkpoint, the shape in current model is torch.Size([4096]).
	size mismatch for encoder.layers.4.fc2.weight: copying a param with shape torch.Size([512, 2048]) from checkpoint, the shape in current model is torch.Size([1536, 4096]).
	size mismatch for encoder.layers.4.fc2.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for encoder.layers.4.final_layer_norm.weight: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for encoder.layers.4.final_layer_norm.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for encoder.layers.5.self_attn.k_proj.weight: copying a param with shape torch.Size([512, 512]) from checkpoint, the shape in current model is torch.Size([1536, 1536]).
	size mismatch for encoder.layers.5.self_attn.k_proj.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for encoder.layers.5.self_attn.v_proj.weight: copying a param with shape torch.Size([512, 512]) from checkpoint, the shape in current model is torch.Size([1536, 1536]).
	size mismatch for encoder.layers.5.self_attn.v_proj.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for encoder.layers.5.self_attn.q_proj.weight: copying a param with shape torch.Size([512, 512]) from checkpoint, the shape in current model is torch.Size([1536, 1536]).
	size mismatch for encoder.layers.5.self_attn.q_proj.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for encoder.layers.5.self_attn.out_proj.weight: copying a param with shape torch.Size([512, 512]) from checkpoint, the shape in current model is torch.Size([1536, 1536]).
	size mismatch for encoder.layers.5.self_attn.out_proj.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for encoder.layers.5.self_attn_layer_norm.weight: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for encoder.layers.5.self_attn_layer_norm.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for encoder.layers.5.fc1.weight: copying a param with shape torch.Size([2048, 512]) from checkpoint, the shape in current model is torch.Size([4096, 1536]).
	size mismatch for encoder.layers.5.fc1.bias: copying a param with shape torch.Size([2048]) from checkpoint, the shape in current model is torch.Size([4096]).
	size mismatch for encoder.layers.5.fc2.weight: copying a param with shape torch.Size([512, 2048]) from checkpoint, the shape in current model is torch.Size([1536, 4096]).
	size mismatch for encoder.layers.5.fc2.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for encoder.layers.5.final_layer_norm.weight: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for encoder.layers.5.final_layer_norm.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.embed_tokens.weight: copying a param with shape torch.Size([33048, 512]) from checkpoint, the shape in current model is torch.Size([33048, 1536]).
	size mismatch for decoder.layers.0.self_attn.k_proj.weight: copying a param with shape torch.Size([512, 512]) from checkpoint, the shape in current model is torch.Size([1536, 1536]).
	size mismatch for decoder.layers.0.self_attn.k_proj.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.0.self_attn.v_proj.weight: copying a param with shape torch.Size([512, 512]) from checkpoint, the shape in current model is torch.Size([1536, 1536]).
	size mismatch for decoder.layers.0.self_attn.v_proj.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.0.self_attn.q_proj.weight: copying a param with shape torch.Size([512, 512]) from checkpoint, the shape in current model is torch.Size([1536, 1536]).
	size mismatch for decoder.layers.0.self_attn.q_proj.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.0.self_attn.out_proj.weight: copying a param with shape torch.Size([512, 512]) from checkpoint, the shape in current model is torch.Size([1536, 1536]).
	size mismatch for decoder.layers.0.self_attn.out_proj.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.0.self_attn_layer_norm.weight: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.0.self_attn_layer_norm.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.0.encoder_attn.k_proj.weight: copying a param with shape torch.Size([512, 512]) from checkpoint, the shape in current model is torch.Size([1536, 1536]).
	size mismatch for decoder.layers.0.encoder_attn.k_proj.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.0.encoder_attn.v_proj.weight: copying a param with shape torch.Size([512, 512]) from checkpoint, the shape in current model is torch.Size([1536, 1536]).
	size mismatch for decoder.layers.0.encoder_attn.v_proj.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.0.encoder_attn.q_proj.weight: copying a param with shape torch.Size([512, 512]) from checkpoint, the shape in current model is torch.Size([1536, 1536]).
	size mismatch for decoder.layers.0.encoder_attn.q_proj.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.0.encoder_attn.out_proj.weight: copying a param with shape torch.Size([512, 512]) from checkpoint, the shape in current model is torch.Size([1536, 1536]).
	size mismatch for decoder.layers.0.encoder_attn.out_proj.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.0.encoder_attn_layer_norm.weight: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.0.encoder_attn_layer_norm.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.0.fc1.weight: copying a param with shape torch.Size([2048, 512]) from checkpoint, the shape in current model is torch.Size([4096, 1536]).
	size mismatch for decoder.layers.0.fc1.bias: copying a param with shape torch.Size([2048]) from checkpoint, the shape in current model is torch.Size([4096]).
	size mismatch for decoder.layers.0.fc2.weight: copying a param with shape torch.Size([512, 2048]) from checkpoint, the shape in current model is torch.Size([1536, 4096]).
	size mismatch for decoder.layers.0.fc2.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.0.final_layer_norm.weight: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.0.final_layer_norm.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.1.self_attn.k_proj.weight: copying a param with shape torch.Size([512, 512]) from checkpoint, the shape in current model is torch.Size([1536, 1536]).
	size mismatch for decoder.layers.1.self_attn.k_proj.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.1.self_attn.v_proj.weight: copying a param with shape torch.Size([512, 512]) from checkpoint, the shape in current model is torch.Size([1536, 1536]).
	size mismatch for decoder.layers.1.self_attn.v_proj.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.1.self_attn.q_proj.weight: copying a param with shape torch.Size([512, 512]) from checkpoint, the shape in current model is torch.Size([1536, 1536]).
	size mismatch for decoder.layers.1.self_attn.q_proj.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.1.self_attn.out_proj.weight: copying a param with shape torch.Size([512, 512]) from checkpoint, the shape in current model is torch.Size([1536, 1536]).
	size mismatch for decoder.layers.1.self_attn.out_proj.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.1.self_attn_layer_norm.weight: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.1.self_attn_layer_norm.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.1.encoder_attn.k_proj.weight: copying a param with shape torch.Size([512, 512]) from checkpoint, the shape in current model is torch.Size([1536, 1536]).
	size mismatch for decoder.layers.1.encoder_attn.k_proj.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.1.encoder_attn.v_proj.weight: copying a param with shape torch.Size([512, 512]) from checkpoint, the shape in current model is torch.Size([1536, 1536]).
	size mismatch for decoder.layers.1.encoder_attn.v_proj.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.1.encoder_attn.q_proj.weight: copying a param with shape torch.Size([512, 512]) from checkpoint, the shape in current model is torch.Size([1536, 1536]).
	size mismatch for decoder.layers.1.encoder_attn.q_proj.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.1.encoder_attn.out_proj.weight: copying a param with shape torch.Size([512, 512]) from checkpoint, the shape in current model is torch.Size([1536, 1536]).
	size mismatch for decoder.layers.1.encoder_attn.out_proj.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.1.encoder_attn_layer_norm.weight: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.1.encoder_attn_layer_norm.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.1.fc1.weight: copying a param with shape torch.Size([2048, 512]) from checkpoint, the shape in current model is torch.Size([4096, 1536]).
	size mismatch for decoder.layers.1.fc1.bias: copying a param with shape torch.Size([2048]) from checkpoint, the shape in current model is torch.Size([4096]).
	size mismatch for decoder.layers.1.fc2.weight: copying a param with shape torch.Size([512, 2048]) from checkpoint, the shape in current model is torch.Size([1536, 4096]).
	size mismatch for decoder.layers.1.fc2.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.1.final_layer_norm.weight: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.1.final_layer_norm.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.2.self_attn.k_proj.weight: copying a param with shape torch.Size([512, 512]) from checkpoint, the shape in current model is torch.Size([1536, 1536]).
	size mismatch for decoder.layers.2.self_attn.k_proj.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.2.self_attn.v_proj.weight: copying a param with shape torch.Size([512, 512]) from checkpoint, the shape in current model is torch.Size([1536, 1536]).
	size mismatch for decoder.layers.2.self_attn.v_proj.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.2.self_attn.q_proj.weight: copying a param with shape torch.Size([512, 512]) from checkpoint, the shape in current model is torch.Size([1536, 1536]).
	size mismatch for decoder.layers.2.self_attn.q_proj.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.2.self_attn.out_proj.weight: copying a param with shape torch.Size([512, 512]) from checkpoint, the shape in current model is torch.Size([1536, 1536]).
	size mismatch for decoder.layers.2.self_attn.out_proj.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.2.self_attn_layer_norm.weight: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.2.self_attn_layer_norm.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.2.encoder_attn.k_proj.weight: copying a param with shape torch.Size([512, 512]) from checkpoint, the shape in current model is torch.Size([1536, 1536]).
	size mismatch for decoder.layers.2.encoder_attn.k_proj.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.2.encoder_attn.v_proj.weight: copying a param with shape torch.Size([512, 512]) from checkpoint, the shape in current model is torch.Size([1536, 1536]).
	size mismatch for decoder.layers.2.encoder_attn.v_proj.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.2.encoder_attn.q_proj.weight: copying a param with shape torch.Size([512, 512]) from checkpoint, the shape in current model is torch.Size([1536, 1536]).
	size mismatch for decoder.layers.2.encoder_attn.q_proj.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.2.encoder_attn.out_proj.weight: copying a param with shape torch.Size([512, 512]) from checkpoint, the shape in current model is torch.Size([1536, 1536]).
	size mismatch for decoder.layers.2.encoder_attn.out_proj.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.2.encoder_attn_layer_norm.weight: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.2.encoder_attn_layer_norm.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.2.fc1.weight: copying a param with shape torch.Size([2048, 512]) from checkpoint, the shape in current model is torch.Size([4096, 1536]).
	size mismatch for decoder.layers.2.fc1.bias: copying a param with shape torch.Size([2048]) from checkpoint, the shape in current model is torch.Size([4096]).
	size mismatch for decoder.layers.2.fc2.weight: copying a param with shape torch.Size([512, 2048]) from checkpoint, the shape in current model is torch.Size([1536, 4096]).
	size mismatch for decoder.layers.2.fc2.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.2.final_layer_norm.weight: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.2.final_layer_norm.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.3.self_attn.k_proj.weight: copying a param with shape torch.Size([512, 512]) from checkpoint, the shape in current model is torch.Size([1536, 1536]).
	size mismatch for decoder.layers.3.self_attn.k_proj.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.3.self_attn.v_proj.weight: copying a param with shape torch.Size([512, 512]) from checkpoint, the shape in current model is torch.Size([1536, 1536]).
	size mismatch for decoder.layers.3.self_attn.v_proj.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.3.self_attn.q_proj.weight: copying a param with shape torch.Size([512, 512]) from checkpoint, the shape in current model is torch.Size([1536, 1536]).
	size mismatch for decoder.layers.3.self_attn.q_proj.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.3.self_attn.out_proj.weight: copying a param with shape torch.Size([512, 512]) from checkpoint, the shape in current model is torch.Size([1536, 1536]).
	size mismatch for decoder.layers.3.self_attn.out_proj.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.3.self_attn_layer_norm.weight: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.3.self_attn_layer_norm.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.3.encoder_attn.k_proj.weight: copying a param with shape torch.Size([512, 512]) from checkpoint, the shape in current model is torch.Size([1536, 1536]).
	size mismatch for decoder.layers.3.encoder_attn.k_proj.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.3.encoder_attn.v_proj.weight: copying a param with shape torch.Size([512, 512]) from checkpoint, the shape in current model is torch.Size([1536, 1536]).
	size mismatch for decoder.layers.3.encoder_attn.v_proj.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.3.encoder_attn.q_proj.weight: copying a param with shape torch.Size([512, 512]) from checkpoint, the shape in current model is torch.Size([1536, 1536]).
	size mismatch for decoder.layers.3.encoder_attn.q_proj.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.3.encoder_attn.out_proj.weight: copying a param with shape torch.Size([512, 512]) from checkpoint, the shape in current model is torch.Size([1536, 1536]).
	size mismatch for decoder.layers.3.encoder_attn.out_proj.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.3.encoder_attn_layer_norm.weight: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.3.encoder_attn_layer_norm.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.3.fc1.weight: copying a param with shape torch.Size([2048, 512]) from checkpoint, the shape in current model is torch.Size([4096, 1536]).
	size mismatch for decoder.layers.3.fc1.bias: copying a param with shape torch.Size([2048]) from checkpoint, the shape in current model is torch.Size([4096]).
	size mismatch for decoder.layers.3.fc2.weight: copying a param with shape torch.Size([512, 2048]) from checkpoint, the shape in current model is torch.Size([1536, 4096]).
	size mismatch for decoder.layers.3.fc2.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.3.final_layer_norm.weight: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.3.final_layer_norm.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.4.self_attn.k_proj.weight: copying a param with shape torch.Size([512, 512]) from checkpoint, the shape in current model is torch.Size([1536, 1536]).
	size mismatch for decoder.layers.4.self_attn.k_proj.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.4.self_attn.v_proj.weight: copying a param with shape torch.Size([512, 512]) from checkpoint, the shape in current model is torch.Size([1536, 1536]).
	size mismatch for decoder.layers.4.self_attn.v_proj.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.4.self_attn.q_proj.weight: copying a param with shape torch.Size([512, 512]) from checkpoint, the shape in current model is torch.Size([1536, 1536]).
	size mismatch for decoder.layers.4.self_attn.q_proj.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.4.self_attn.out_proj.weight: copying a param with shape torch.Size([512, 512]) from checkpoint, the shape in current model is torch.Size([1536, 1536]).
	size mismatch for decoder.layers.4.self_attn.out_proj.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.4.self_attn_layer_norm.weight: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.4.self_attn_layer_norm.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.4.encoder_attn.k_proj.weight: copying a param with shape torch.Size([512, 512]) from checkpoint, the shape in current model is torch.Size([1536, 1536]).
	size mismatch for decoder.layers.4.encoder_attn.k_proj.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.4.encoder_attn.v_proj.weight: copying a param with shape torch.Size([512, 512]) from checkpoint, the shape in current model is torch.Size([1536, 1536]).
	size mismatch for decoder.layers.4.encoder_attn.v_proj.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.4.encoder_attn.q_proj.weight: copying a param with shape torch.Size([512, 512]) from checkpoint, the shape in current model is torch.Size([1536, 1536]).
	size mismatch for decoder.layers.4.encoder_attn.q_proj.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.4.encoder_attn.out_proj.weight: copying a param with shape torch.Size([512, 512]) from checkpoint, the shape in current model is torch.Size([1536, 1536]).
	size mismatch for decoder.layers.4.encoder_attn.out_proj.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.4.encoder_attn_layer_norm.weight: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.4.encoder_attn_layer_norm.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.4.fc1.weight: copying a param with shape torch.Size([2048, 512]) from checkpoint, the shape in current model is torch.Size([4096, 1536]).
	size mismatch for decoder.layers.4.fc1.bias: copying a param with shape torch.Size([2048]) from checkpoint, the shape in current model is torch.Size([4096]).
	size mismatch for decoder.layers.4.fc2.weight: copying a param with shape torch.Size([512, 2048]) from checkpoint, the shape in current model is torch.Size([1536, 4096]).
	size mismatch for decoder.layers.4.fc2.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.4.final_layer_norm.weight: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.4.final_layer_norm.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.5.self_attn.k_proj.weight: copying a param with shape torch.Size([512, 512]) from checkpoint, the shape in current model is torch.Size([1536, 1536]).
	size mismatch for decoder.layers.5.self_attn.k_proj.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.5.self_attn.v_proj.weight: copying a param with shape torch.Size([512, 512]) from checkpoint, the shape in current model is torch.Size([1536, 1536]).
	size mismatch for decoder.layers.5.self_attn.v_proj.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.5.self_attn.q_proj.weight: copying a param with shape torch.Size([512, 512]) from checkpoint, the shape in current model is torch.Size([1536, 1536]).
	size mismatch for decoder.layers.5.self_attn.q_proj.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.5.self_attn.out_proj.weight: copying a param with shape torch.Size([512, 512]) from checkpoint, the shape in current model is torch.Size([1536, 1536]).
	size mismatch for decoder.layers.5.self_attn.out_proj.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.5.self_attn_layer_norm.weight: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.5.self_attn_layer_norm.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.5.encoder_attn.k_proj.weight: copying a param with shape torch.Size([512, 512]) from checkpoint, the shape in current model is torch.Size([1536, 1536]).
	size mismatch for decoder.layers.5.encoder_attn.k_proj.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.5.encoder_attn.v_proj.weight: copying a param with shape torch.Size([512, 512]) from checkpoint, the shape in current model is torch.Size([1536, 1536]).
	size mismatch for decoder.layers.5.encoder_attn.v_proj.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.5.encoder_attn.q_proj.weight: copying a param with shape torch.Size([512, 512]) from checkpoint, the shape in current model is torch.Size([1536, 1536]).
	size mismatch for decoder.layers.5.encoder_attn.q_proj.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.5.encoder_attn.out_proj.weight: copying a param with shape torch.Size([512, 512]) from checkpoint, the shape in current model is torch.Size([1536, 1536]).
	size mismatch for decoder.layers.5.encoder_attn.out_proj.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.5.encoder_attn_layer_norm.weight: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.5.encoder_attn_layer_norm.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.5.fc1.weight: copying a param with shape torch.Size([2048, 512]) from checkpoint, the shape in current model is torch.Size([4096, 1536]).
	size mismatch for decoder.layers.5.fc1.bias: copying a param with shape torch.Size([2048]) from checkpoint, the shape in current model is torch.Size([4096]).
	size mismatch for decoder.layers.5.fc2.weight: copying a param with shape torch.Size([512, 2048]) from checkpoint, the shape in current model is torch.Size([1536, 4096]).
	size mismatch for decoder.layers.5.fc2.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.5.final_layer_norm.weight: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.layers.5.final_layer_norm.bias: copying a param with shape torch.Size([512]) from checkpoint, the shape in current model is torch.Size([1536]).
	size mismatch for decoder.output_projection.weight: copying a param with shape torch.Size([33048, 512]) from checkpoint, the shape in current model is torch.Size([33048, 1536]).
	size mismatch for decoder.ptrnet.linear.weight: copying a param with shape torch.Size([1, 1024]) from checkpoint, the shape in current model is torch.Size([1, 3072]).

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/souvik/.conda/envs/trialv12/lib/python3.6/site-packages/torch/multiprocessing/spawn.py", line 59, in _wrap
    fn(i, *args)
  File "/home/souvik/improved_leca/trial_v12/dictdis_multigpu/fairseq/fairseq/distributed/utils.py", line 328, in distributed_main
    main(cfg, **kwargs)
  File "/home/souvik/improved_leca/trial_v12/dictdis_multigpu/fairseq/fairseq_cli/train.py", line 169, in main
    disable_iterator_cache=task.has_sharded_data("train"),
  File "/home/souvik/improved_leca/trial_v12/dictdis_multigpu/fairseq/fairseq/checkpoint_utils.py", line 253, in load_checkpoint
    reset_meters=reset_meters,
  File "/home/souvik/improved_leca/trial_v12/dictdis_multigpu/fairseq/fairseq/trainer.py", line 583, in load_checkpoint
    "please ensure that the architectures match.".format(filename)
Exception: Cannot load model parameters from checkpoint checkpoints_latest/checkpoint_best.pt; please ensure that the architectures match.

